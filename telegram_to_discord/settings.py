"""
Django settings for telegram_to_discord project.

Generated by 'django-admin startproject' using Django 4.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
import os
from pathlib import Path
import environ
from django.urls import reverse_lazy

from .celerybeat import *  # noqa

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

env = environ.Env(DEBUG=(bool, False))
environ.Env.read_env(str(os.path.join(BASE_DIR, "./.env")))

SECRET_KEY = env.str("SECRET_KEY")

DEBUG = env.bool("DEBUG")

SITE_DOMAIN = env.str("SITE_DOMAIN")

CSRF_TRUSTED_ORIGINS = [SITE_DOMAIN]

ALLOWED_HOSTS = ["*", SITE_DOMAIN]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    "discord_messages",
    "users",
    "loginas",
    "orders",
    "bot_config",
    "courses",
    "solo",
    'sorl.thumbnail',
    "ckeditor",
    "ckeditor_uploader",
    "embed_video",
    "stable_messages",
    "support",
    "comments"
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'courses.middleware.RefererHeaderMiddleware'
]

AUTHENTICATION_BACKENDS = [
    "django.contrib.auth.backends.ModelBackend",
]

ROOT_URLCONF = 'telegram_to_discord.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates']
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'courses.context_processors.headers_courses'
            ],
        },
    },
]

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        "file": {
            "level": "WARNING",
            "class": "logging.FileHandler",
            "filename": "telegram_log.log"
        }
    },
    "loggers": {
        "django": {
            "handlers": ["file"],
            "level": "WARNING",
            "propagate": True
        }
    }
}

WSGI_APPLICATION = 'telegram_to_discord.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }
DATABASES = {
    'default': {
        'ENGINE': env.str('DB_ENGINE'),
        'NAME': env.str('DB_NAME'),
        'USER': env.str('POSTGRES_USER'),
        'PASSWORD': env.str('POSTGRES_PASSWORD'),
        'HOST': env.str('DB_HOST'),
        'PORT': env.str('DB_PORT')
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

MEDIA_ROOT = str(BASE_DIR / "media")
if DEBUG:
    STATIC_ROOT = str(BASE_DIR / "staticfiles")
else:
    STATIC_ROOT = "/var/html/static/"
MEDIA_URL = "/media/"
STATIC_URL = "/static/"
STATICFILES_DIRS = [
    str(BASE_DIR / "static"),
    "/var/html/telegram_discord/static/"
]

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

AUTH_USER_MODEL = "users.User"
LOGIN_URL = reverse_lazy("auth:login")

# Discord
DISCORD_TOKEN = env.str("DISCORD_TOKEN")
DISCORD_CHANNEL = env.str("DISCORD_CHANNEL")

TELEGRAM_TOKEN = env.str("TELEGRAM_TOKEN")
PAYMENT_TELEGRAM_TOKEN = env.str("PAYMENT_TELEGRAM_TOKEN")
STABLE_TELEGRAM_TOKEN = env.str("STABLE_TELEGRAM_TOKEN")
SUPPORT_TELEGRAM_TOKEN = env.str("SUPPORT_TELEGRAM_TOKEN")
COMMENT_TELEGRAM_TOKEN = env.str("COMMENT_TELEGRAM_TOKEN")

# CELERY
CELERY_BROKER_URL = env.str("REDIS_URL")
CELERY_RESULT_BACKEND = env.str("REDIS_URL")
CELERY_ACCEPT_CONTENT = ["application/json"]
CELERY_RESULT_SERIALIZER = "json"
CELERY_TASK_SERIALIZER = "json"
CELERY_TIMEZONE = "Europe/Moscow"
CELERY_DEFAULT_QUEUE = "default"
CELERY_HEARTBEAT = 0
BROKER_HEARTBEAT = 0
BROKER_CONNECTION_RETRY = 10
BROKER_CONNECTION_MAX_RETRIES = 10
broker_connection_retry_on_startup = True
task_acks_late = True
worker_prefetch_multiplier = 1
CELERY_TASK_DEFAULT_QUEUE = CELERY_DEFAULT_QUEUE
CELERY_TASK_ROUTES = {
    "discord_messages.tasks.tasks.get_discord_messages": {"queue": "telegram"},
    "discord_messages.tasks.tasks.send_messages_to_telegram": {"queue": "telegram"},
    "discord_messages.tasks.tasks.handle_telegram_message": {"queue": "messages"},
    "discord_messages.tasks.tasks.send_message_to_discord_task": {"queue": "messages"},
    "discord_messages.tasks.tasks.send_message_no_answer": {"queue": "telegram"},
    "discord_messages.tasks.tasks.delete_old_messages": {"queue": "telegram"},
    "discord_messages.tasks.tasks.send_message_to_discord_task_1": {"queue": "messages1"},
    "discord_messages.tasks.tasks.send_message_to_discord_task_2": {"queue": "messages2"},
    "discord_messages.tasks.tasks.send_message_to_discord_task_3": {"queue": "messages3"},
    "stable_messages.tasks.tasks.send_upscale_to_stable": {"queue": "telegram1"},
    "stable_messages.tasks.tasks.send_zoom_to_stable": {"queue": "messages1"},
    "stable_messages.tasks.tasks.send_stable_messages_to_telegram_1": {"queue": "telegram"},
    "stable_messages.tasks.tasks.send_stable_messages_to_telegram_2": {"queue": "messages"},
    "stable_messages.tasks.tasks.send_stable_messages_to_telegram_3": {"queue": "messages1"},
    "stable_messages.tasks.tasks.send_stable_messages_to_telegram_4": {"queue": "messages3"},
    "stable_messages.tasks.tasks.send_vary_to_stable": {"queue": "messages2"},
    "stable_messages.tasks.tasks.send_vary_to_stable_new": {"queue": "messages2"},
    "stable_messages.tasks.tasks.handle_image_message": {"queue": "messages"},
    "stable_messages.tasks.tasks.check_not_sent_messages": {"queue": "telegram"},
    "stable_messages.tasks.fireworks_api.create_video_from_image": {"queue": "telegram2"},
    "stable_messages.tasks.fireworks_api.fetch_video": {"queue": "telegram2"},
    "stable_messages.tasks.fireworks_api.clear_space": {"queue": "telegram2"},
    "stable_messages.tasks.tasks.send_message_to_stable_1": {"queue": "telegram1"},
    "stable_messages.tasks.tasks.send_message_to_stable_2": {"queue": "telegram2"},
    "stable_messages.tasks.tasks.send_message_to_stable_3": {"queue": "telegram3"},
    "stable_messages.tasks.tasks.send_message_to_stable_4": {"queue": "telegram4"},
    "stable_messages.tasks.tasks.send_message_to_stable": {"queue": "messages2"},
    "stable_messages.tasks.tasks.send_message_to_stable_new": {"queue": "telegram"},
    "stable_messages.tasks.tasks.resend_messages": {"queue": "messages1"}
}
BROKER_CONNECTION_RETRY_ON_STARTUP = True

CAN_LOGIN_AS = lambda request, target_user: request.user.is_superuser
LOGINAS_USERNAME_FIELD = 'username'
LOGINAS_REDIRECT_URL = '/users'

PAYMENT_URL = env.str("PAYMENT_URL")
PRODAMUS_SYSTEM_CODE = env.str("PRODAMUS_SYSTEM_CODE")
PRODAMUS_SECRET_KEY = env.str("PRODAMUS_SECRET_KEY")

FIREWORKS_API_KEY = env.str("FIREWORKS_API_KEY")
FIREWORKS_TELEGRAM_TOKEN = env.str("FIREWORKS_TELEGRAM_TOKEN")

TECH_BOT_URL = env.str("TECH_BOT_URL")

# CKEDITOR
CKEDITOR_UPLOAD_PATH = "content/ckeditor/"
CKEDITOR_IMAGE_BACKEND = "pillow"
CKEDITOR_CONFIGS = {
    "default": {
        "toolbar": [
            ["Format", "Bold", "Italic", "Underline", "Strike", "SpellChecker"],
            [
                "NumberedList",
                "BulletedList",
                "Indent",
                "Outdent",
                "JustifyLeft",
                "JustifyCenter",
                "JustifyRight",
                "JustifyBlock",
                "Table",
            ],
            ["Image", "Link", "Unlink", "Anchor", "SectionLink", "Subscript", "Superscript"],
            ['Styles', 'Format', 'Font', 'FontSize'],
            ['TextColor', 'BGColor'],
            ["Undo", "Redo"],
            ["Source"],
            ["Maximize"],
            ["lineheight"]
        ],
        "lineheight": "1em;1.1em;1.2em;1.3em;1.4em;1.5em;2px;3px;1.5px",
        'extraPlugins': ','.join([
            "lineheight"
        ]),
        "external_plugin_resources": [(
            'lineheight',
            '/static/js/lineheight/',
            'plugin.js',
        )],
        "height": 300,
        "width": 650,
    },
}

ADMIN_CHAT_IDS = ["1792622682", "344637537"]

